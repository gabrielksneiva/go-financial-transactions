// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RedisClientInterface is an autogenerated mock type for the RedisClientInterface type
type RedisClientInterface struct {
	mock.Mock
}

type RedisClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisClientInterface) EXPECT() *RedisClientInterface_Expecter {
	return &RedisClientInterface_Expecter{mock: &_m.Mock}
}

// Expire provides a mock function with given fields: ctx, key, expiration
func (_m *RedisClientInterface) Expire(ctx context.Context, key string, expiration time.Duration) error {
	ret := _m.Called(ctx, key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Expire")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisClientInterface_Expire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expire'
type RedisClientInterface_Expire_Call struct {
	*mock.Call
}

// Expire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *RedisClientInterface_Expecter) Expire(ctx interface{}, key interface{}, expiration interface{}) *RedisClientInterface_Expire_Call {
	return &RedisClientInterface_Expire_Call{Call: _e.mock.On("Expire", ctx, key, expiration)}
}

func (_c *RedisClientInterface_Expire_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *RedisClientInterface_Expire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *RedisClientInterface_Expire_Call) Return(_a0 error) *RedisClientInterface_Expire_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisClientInterface_Expire_Call) RunAndReturn(run func(context.Context, string, time.Duration) error) *RedisClientInterface_Expire_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *RedisClientInterface) Get(ctx context.Context, key string) (int, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisClientInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RedisClientInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *RedisClientInterface_Expecter) Get(ctx interface{}, key interface{}) *RedisClientInterface_Get_Call {
	return &RedisClientInterface_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *RedisClientInterface_Get_Call) Run(run func(ctx context.Context, key string)) *RedisClientInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RedisClientInterface_Get_Call) Return(_a0 int, _a1 error) *RedisClientInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisClientInterface_Get_Call) RunAndReturn(run func(context.Context, string) (int, error)) *RedisClientInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Incr provides a mock function with given fields: ctx, key
func (_m *RedisClientInterface) Incr(ctx context.Context, key string) (int, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Incr")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisClientInterface_Incr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Incr'
type RedisClientInterface_Incr_Call struct {
	*mock.Call
}

// Incr is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *RedisClientInterface_Expecter) Incr(ctx interface{}, key interface{}) *RedisClientInterface_Incr_Call {
	return &RedisClientInterface_Incr_Call{Call: _e.mock.On("Incr", ctx, key)}
}

func (_c *RedisClientInterface_Incr_Call) Run(run func(ctx context.Context, key string)) *RedisClientInterface_Incr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RedisClientInterface_Incr_Call) Return(_a0 int, _a1 error) *RedisClientInterface_Incr_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisClientInterface_Incr_Call) RunAndReturn(run func(context.Context, string) (int, error)) *RedisClientInterface_Incr_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value
func (_m *RedisClientInterface) Set(ctx context.Context, key string, value int) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisClientInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type RedisClientInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value int
func (_e *RedisClientInterface_Expecter) Set(ctx interface{}, key interface{}, value interface{}) *RedisClientInterface_Set_Call {
	return &RedisClientInterface_Set_Call{Call: _e.mock.On("Set", ctx, key, value)}
}

func (_c *RedisClientInterface_Set_Call) Run(run func(ctx context.Context, key string, value int)) *RedisClientInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *RedisClientInterface_Set_Call) Return(_a0 error) *RedisClientInterface_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisClientInterface_Set_Call) RunAndReturn(run func(context.Context, string, int) error) *RedisClientInterface_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewRedisClientInterface creates a new instance of RedisClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisClientInterface {
	mock := &RedisClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
