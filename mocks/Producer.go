// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/gabrielksneiva/go-financial-transactions/domain"
	mock "github.com/stretchr/testify/mock"
)

// Producer is an autogenerated mock type for the Producer type
type Producer struct {
	mock.Mock
}

type Producer_Expecter struct {
	mock *mock.Mock
}

func (_m *Producer) EXPECT() *Producer_Expecter {
	return &Producer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Producer) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Producer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Producer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Producer_Expecter) Close() *Producer_Close_Call {
	return &Producer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Producer_Close_Call) Run(run func()) *Producer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Producer_Close_Call) Return(_a0 error) *Producer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Producer_Close_Call) RunAndReturn(run func() error) *Producer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// SendTransaction provides a mock function with given fields: tx
func (_m *Producer) SendTransaction(tx domain.Transaction) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for SendTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Transaction) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Producer_SendTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTransaction'
type Producer_SendTransaction_Call struct {
	*mock.Call
}

// SendTransaction is a helper method to define mock.On call
//   - tx domain.Transaction
func (_e *Producer_Expecter) SendTransaction(tx interface{}) *Producer_SendTransaction_Call {
	return &Producer_SendTransaction_Call{Call: _e.mock.On("SendTransaction", tx)}
}

func (_c *Producer_SendTransaction_Call) Run(run func(tx domain.Transaction)) *Producer_SendTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Transaction))
	})
	return _c
}

func (_c *Producer_SendTransaction_Call) Return(_a0 error) *Producer_SendTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Producer_SendTransaction_Call) RunAndReturn(run func(domain.Transaction) error) *Producer_SendTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewProducer creates a new instance of Producer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Producer {
	mock := &Producer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
