// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RateLimiter is an autogenerated mock type for the RateLimiter type
type RateLimiter struct {
	mock.Mock
}

type RateLimiter_Expecter struct {
	mock *mock.Mock
}

func (_m *RateLimiter) EXPECT() *RateLimiter_Expecter {
	return &RateLimiter_Expecter{mock: &_m.Mock}
}

// CheckTransactionRateLimit provides a mock function with given fields: userID
func (_m *RateLimiter) CheckTransactionRateLimit(userID uint) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CheckTransactionRateLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RateLimiter_CheckTransactionRateLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckTransactionRateLimit'
type RateLimiter_CheckTransactionRateLimit_Call struct {
	*mock.Call
}

// CheckTransactionRateLimit is a helper method to define mock.On call
//   - userID uint
func (_e *RateLimiter_Expecter) CheckTransactionRateLimit(userID interface{}) *RateLimiter_CheckTransactionRateLimit_Call {
	return &RateLimiter_CheckTransactionRateLimit_Call{Call: _e.mock.On("CheckTransactionRateLimit", userID)}
}

func (_c *RateLimiter_CheckTransactionRateLimit_Call) Run(run func(userID uint)) *RateLimiter_CheckTransactionRateLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *RateLimiter_CheckTransactionRateLimit_Call) Return(_a0 error) *RateLimiter_CheckTransactionRateLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RateLimiter_CheckTransactionRateLimit_Call) RunAndReturn(run func(uint) error) *RateLimiter_CheckTransactionRateLimit_Call {
	_c.Call.Return(run)
	return _c
}

// NewRateLimiter creates a new instance of RateLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateLimiter {
	mock := &RateLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
