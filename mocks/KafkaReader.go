// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	kafka "github.com/segmentio/kafka-go"
	mock "github.com/stretchr/testify/mock"
)

// KafkaReader is an autogenerated mock type for the KafkaReader type
type KafkaReader struct {
	mock.Mock
}

type KafkaReader_Expecter struct {
	mock *mock.Mock
}

func (_m *KafkaReader) EXPECT() *KafkaReader_Expecter {
	return &KafkaReader_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *KafkaReader) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KafkaReader_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type KafkaReader_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *KafkaReader_Expecter) Close() *KafkaReader_Close_Call {
	return &KafkaReader_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *KafkaReader_Close_Call) Run(run func()) *KafkaReader_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KafkaReader_Close_Call) Return(_a0 error) *KafkaReader_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KafkaReader_Close_Call) RunAndReturn(run func() error) *KafkaReader_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ReadMessage provides a mock function with given fields: _a0
func (_m *KafkaReader) ReadMessage(_a0 context.Context) (kafka.Message, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ReadMessage")
	}

	var r0 kafka.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (kafka.Message, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) kafka.Message); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kafka.Message)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KafkaReader_ReadMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadMessage'
type KafkaReader_ReadMessage_Call struct {
	*mock.Call
}

// ReadMessage is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *KafkaReader_Expecter) ReadMessage(_a0 interface{}) *KafkaReader_ReadMessage_Call {
	return &KafkaReader_ReadMessage_Call{Call: _e.mock.On("ReadMessage", _a0)}
}

func (_c *KafkaReader_ReadMessage_Call) Run(run func(_a0 context.Context)) *KafkaReader_ReadMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *KafkaReader_ReadMessage_Call) Return(_a0 kafka.Message, _a1 error) *KafkaReader_ReadMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KafkaReader_ReadMessage_Call) RunAndReturn(run func(context.Context) (kafka.Message, error)) *KafkaReader_ReadMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewKafkaReader creates a new instance of KafkaReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKafkaReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *KafkaReader {
	mock := &KafkaReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
