// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/gabrielksneiva/go-financial-transactions/domain"
	mock "github.com/stretchr/testify/mock"
)

// BlockchainClient is an autogenerated mock type for the BlockchainClient type
type BlockchainClient struct {
	mock.Mock
}

type BlockchainClient_Expecter struct {
	mock *mock.Mock
}

func (_m *BlockchainClient) EXPECT() *BlockchainClient_Expecter {
	return &BlockchainClient_Expecter{mock: &_m.Mock}
}

// SendSignedTRX provides a mock function with given fields: tx, transactionID
func (_m *BlockchainClient) SendSignedTRX(tx domain.BlockchainTransaction, transactionID string) (*domain.BlockchainTxResult, error) {
	ret := _m.Called(tx, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for SendSignedTRX")
	}

	var r0 *domain.BlockchainTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.BlockchainTransaction, string) (*domain.BlockchainTxResult, error)); ok {
		return rf(tx, transactionID)
	}
	if rf, ok := ret.Get(0).(func(domain.BlockchainTransaction, string) *domain.BlockchainTxResult); ok {
		r0 = rf(tx, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlockchainTxResult)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.BlockchainTransaction, string) error); ok {
		r1 = rf(tx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockchainClient_SendSignedTRX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSignedTRX'
type BlockchainClient_SendSignedTRX_Call struct {
	*mock.Call
}

// SendSignedTRX is a helper method to define mock.On call
//   - tx domain.BlockchainTransaction
//   - transactionID string
func (_e *BlockchainClient_Expecter) SendSignedTRX(tx interface{}, transactionID interface{}) *BlockchainClient_SendSignedTRX_Call {
	return &BlockchainClient_SendSignedTRX_Call{Call: _e.mock.On("SendSignedTRX", tx, transactionID)}
}

func (_c *BlockchainClient_SendSignedTRX_Call) Run(run func(tx domain.BlockchainTransaction, transactionID string)) *BlockchainClient_SendSignedTRX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.BlockchainTransaction), args[1].(string))
	})
	return _c
}

func (_c *BlockchainClient_SendSignedTRX_Call) Return(_a0 *domain.BlockchainTxResult, _a1 error) *BlockchainClient_SendSignedTRX_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockchainClient_SendSignedTRX_Call) RunAndReturn(run func(domain.BlockchainTransaction, string) (*domain.BlockchainTxResult, error)) *BlockchainClient_SendSignedTRX_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlockchainClient creates a new instance of BlockchainClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockchainClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockchainClient {
	mock := &BlockchainClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
