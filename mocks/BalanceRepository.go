// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/gabrielksneiva/go-financial-transactions/domain"
	mock "github.com/stretchr/testify/mock"
)

// BalanceRepository is an autogenerated mock type for the BalanceRepository type
type BalanceRepository struct {
	mock.Mock
}

type BalanceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *BalanceRepository) EXPECT() *BalanceRepository_Expecter {
	return &BalanceRepository_Expecter{mock: &_m.Mock}
}

// GetBalance provides a mock function with given fields: userID
func (_m *BalanceRepository) GetBalance(userID uint) (*domain.Balance, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *domain.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Balance, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Balance); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BalanceRepository_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type BalanceRepository_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - userID uint
func (_e *BalanceRepository_Expecter) GetBalance(userID interface{}) *BalanceRepository_GetBalance_Call {
	return &BalanceRepository_GetBalance_Call{Call: _e.mock.On("GetBalance", userID)}
}

func (_c *BalanceRepository_GetBalance_Call) Run(run func(userID uint)) *BalanceRepository_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *BalanceRepository_GetBalance_Call) Return(_a0 *domain.Balance, _a1 error) *BalanceRepository_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BalanceRepository_GetBalance_Call) RunAndReturn(run func(uint) (*domain.Balance, error)) *BalanceRepository_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBalance provides a mock function with given fields: tx
func (_m *BalanceRepository) UpdateBalance(tx domain.Transaction) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Transaction) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BalanceRepository_UpdateBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBalance'
type BalanceRepository_UpdateBalance_Call struct {
	*mock.Call
}

// UpdateBalance is a helper method to define mock.On call
//   - tx domain.Transaction
func (_e *BalanceRepository_Expecter) UpdateBalance(tx interface{}) *BalanceRepository_UpdateBalance_Call {
	return &BalanceRepository_UpdateBalance_Call{Call: _e.mock.On("UpdateBalance", tx)}
}

func (_c *BalanceRepository_UpdateBalance_Call) Run(run func(tx domain.Transaction)) *BalanceRepository_UpdateBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Transaction))
	})
	return _c
}

func (_c *BalanceRepository_UpdateBalance_Call) Return(_a0 error) *BalanceRepository_UpdateBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BalanceRepository_UpdateBalance_Call) RunAndReturn(run func(domain.Transaction) error) *BalanceRepository_UpdateBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewBalanceRepository creates a new instance of BalanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBalanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BalanceRepository {
	mock := &BalanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
