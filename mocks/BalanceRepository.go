// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "go-financial-transactions/domain"

	mock "github.com/stretchr/testify/mock"
)

// BalanceRepository is an autogenerated mock type for the BalanceRepository type
type BalanceRepository struct {
	mock.Mock
}

// GetBalance provides a mock function with given fields: userID
func (_m *BalanceRepository) GetBalance(userID string) (*domain.Balance, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *domain.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Balance, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Balance); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalance provides a mock function with given fields: tx
func (_m *BalanceRepository) UpdateBalance(tx domain.Transaction) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Transaction) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBalanceRepository creates a new instance of BalanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBalanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BalanceRepository {
	mock := &BalanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
